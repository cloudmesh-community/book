# -*- makefile -*-

OS=$(shell ../bin/sysinfo.py)
DOCKER=$(shell ../bin/isdocker.py)
IMAGE_DIRS=$(shell ../bin/find-image-dirs.py)

#MARKUPALL=../bin/markup-all.py


#
# removing mermaid filter from linux as we do not yet know how to use it in docker
#

COPY=rsync
ifeq ($(OS), osx)
OPEN_EPUB=open
MERMAID=-F mermaid-filter
endif
ifeq ($(OS), linux)
OPEN_EPUB=xdg-open
MERMAID=-F mermaid-filter
endif
ifeq ($(OS), windows)
OPEN_EPUB=open
MERMAID=-F mermaid-filter.cmd
endif
ifeq ($(DOCKER), True)
MERMAID=
endif

#not using mermaid

MERMAID=


all: splash prepare epub 
	echo done

splash:
	@echo "# ======================================================================"
	@echo "# Creating:", $(BOOK)
	@echo "# Epub    :", $(FILENAME)
	@echo "# ======================================================================"

new: clean update images issues all
	echo done

missing:
	../bin/manifest-parser.py info no $(BOOK)

update: Makefile
	python ../bin/manifest-parser.py dep $(BOOK) > ../Makefile.$(BOOK)

tree: Makefile
	../bin/manifest-parser.py tree $(BOOK) 

include ../Makefile.$(BOOK)

test:
	echo $(INDEX)

# --filter pandoc-mustache
MARKDOWN-OPTIONS=--verbose  $(MERMAID) --filter pandoc-crossref -f markdown+header_attributes -f markdown+smart -f markdown+emoji --indented-code-classes=bash,python,yaml
##MARKDOWN-OPTIONS=--verbose  $(MERMAID)  --filter pandoc-fignos -f markdown+header_attributes -f markdown+smart -f markdown+emoji --indented-code-classes=bash,python,yaml 
#MARKDOWN-OPTIONS=--verbose -f IncludeFilter $(MERMAID) --filter pandoc-fignos -f markdown+header_attributes -f markdown+smart -f markdown+emoji --indented-code-classes=bash,python,yaml
CSL=--csl=template/ieee-with-url.csl
FORMAT=--toc --number-sections
FONTS=--epub-embed-font='fonts/*.ttf'
BIB=--metadata link-citations=true --bibliography references.bib
# can be removed to avoid duplicate as already appeared in metadata.txt
#CSS=--css=template/epub.css
RESOURCE=--resource-path=$(IMAGE_DIRS)

#abbrev:
#	#~/.pandoc/filters/abbrevs.py
#	mkdir -p ~/.pandoc/filters
#	cp ../chapters/dbase ~/.pandoc/dbase
#	cp ../bin/abbrevs.py ~/.pandoc/filters

draft: prepare epubdraft
	echo done

images:
	mkdir -p dest
	rsync -v -r --include='*.jpeg' --include='*.jpg' --include='*.png' --include='*.JPG' --include='*.PNG' --exclude=".DS_Store" --exclude="*.md"   --exclude="*.tex" --exclude="*.txt" ../chapters dest 

destination: 
	mkdir -p dest
	$(COPY) metadata.txt dest
	$(COPY) -r cover dest
	$(COPY) -r ../template dest
	$(COPY) -r ../template/fonts dest

authors:
	../bin/authors.py > ../chapters/authors.md

version:
	../bin/date.py > ../chapters/version.md

generateimages:
ifeq (,$(wildcard dest/chapters/images/penguin.jpg))
	make -f Makefile images
endif

dest_dir:
	mkdir -p dest

prepare: dest_dir references generateimages version authors destination chapterlist  todo index issues
	echo >> dest/chapters/version.md
	echo >> dest/chapters/version.md
	echo "This document can be downloaded from" >> dest/chapters/version.md
	echo >> dest/chapters/version.md
	echo >> dest/chapters/version.md
	echo "* <https://github.com/cloudmesh-community/book/blob/master/$(FILENAME).epub?raw=true>" >> dest/chapters/version.md
	echo >> dest/chapters/version.md
	echo >> dest/chapters/version.md

bibtex: bibtex-duplicate bibtex-cat bibtex-error bibtex-datamodel

bibtex-issues: references
	mkdir -p dest
	cd dest; rm -f *.blg *_bibertool.bib
	cd dest; cat -n references.bib
	cd dest; biber -V --tool references.bib | fgrep -v Datamodel | fgrep -v INFO | fgrep -v Duplicate | fgrep -v Overwriting | fgrep -v ISBN

bibtex-duplicate: references
	cd dest; biber -V --tool references.bib | fgrep Duplicate

bibtex-cat:
	cd dest; cat -n references.bib

bibtex-ERROR:
	cd dest; biber -V --tool references.bib | fgrep ERROR

bibtex-datamodel:
	cd dest; biber -V --tool references.bib | fgrep Datamodel

bibtex-other:
	cd dest; biber -V --tool references.bib | fgrep -v Datamodel

bibtex-junk:
	cd dest; biber -V --tool references.bib | fgrep junk


# cd dest; iconv -t utf-8 $(INDEX) > all.md
# cd dest; cp all.md all-in.md
# cd dest; pandoc all-in.md --filter=abbrevs.py -o all.md

epub: prepare
	cd dest; touch chapters/index.md
ifeq ($(OS), osx)
	cd dest; cat $(INDEX) > all.md
endif
ifeq ($(OS), linux)
	cd dest; cat $(INDEX) > all.md
endif
	make -f Makefile index
	cd dest; pandoc $(RESOURCE) $(MARKDOWN-OPTIONS)  $(FORMAT) $(FONTS) $(BIB)  $(CSL) $(CSS) -o $(FILENAME).epub metadata.txt all.md
	cp dest/$(FILENAME).epub ..


pdf: epub
	cp ../bin/emojifix/* ./dest
	cp dest/*.png dest/chapters/images
	cd dest; ./fix-emoji.py all.md all4pdf.md
	cd dest; pandoc $(RESOURCE) $(MARKDOWN-OPTIONS)  $(FORMAT) $(FONTS) $(BIB)  $(CSL) $(CSS) -o all4pdf.epub metadata.txt all4pdf.md
	cd dest; rm -rf bookedit; mkdir bookedit; unzip all4pdf.epub -d ./bookedit; sed -i -e 's/..\/media/.\/media/g' ./bookedit/EPUB/nav.xhtml
	cd dest/bookedit; zip -X all4pdfnew.epub mimetype; zip -rg all4pdfnew.epub META-INF -x \*.DS_Store; zip -rg all4pdfnew.epub EPUB -x \*.DS_Store
	cp dest/bookedit/all4pdfnew.epub ./dest
	cd dest; ebook-convert all4pdfnew.epub $(FILENAME).pdf --pdf-page-numbers --embed-all-fonts
	cp dest/$(FILENAME).pdf ../$(FILENAME).pdf

epub-all: prepare
ifeq ($(OS), osx)
	cd dest; iconv -t utf-8 $(INDEX) > all.md
endif
ifeq ($(OS), linux)
	cd dest; cat $(INDEX) > all.md
endif
	make -f Makefile fixemoji
	cd dest; pandoc $(RESOURCE) $(MARKDOWN-OPTIONS)  $(FORMAT) $(FONTS) $(BIB)  $(CSL) $(CSS) -o $(FILENAME).epub metadata.txt $(INDEX)

find:
	cd ..; grep -R -n "$(FIND)" $(INDEX)

nolanguage:
	cd ..; grep -R -n "\`\`\`" $(INDEX)

# cd dest; iconv -t utf-8 $(DRAFT) > all.md

epubdraft: prepare
ifeq ($(OS), osx)
	cd dest; cat $(DRAFT) > all.md
endif
ifeq ($(OS), linux)
	cd dest; cat $(DRAFT) > all.md
endif
	cd dest; pandoc $(RESOURCE) $(MARKDOWN-OPTIONS)  $(FORMAT) $(FONTS) $(BIB)  $(CSL) $(CSS) -o $(FILENAME).epub metadata.txt all.md


references:
	mkdir -p dest
	cat ../bib/*.bib > dest/references.bib

html:
	cd dest; pandoc $(MARKDOWN-OPTIONS)  $(FORMAT) $(FONTS) $(BIB)  $(CSL) $(CSS) -o $(FILENAME).html metadata.txt $(INDEX)


latex-pdf:
	cd dest; pandoc $(RESOURCE) -V pagestyle:headings -V secnumdepth:5 -V geometry:margin=1in --pdf-engine=xelatex -f markdown+smart --toc --epub-embed-font='fonts/*.ttf' -V geometry:margin=1in --bibliography references.bib --csl=../../template/ieee.csl -o $(FILENAME).pdf metadata.txt $(INDEX)


e-pdf:prepare
	cd dest; touch chapters/index.md
ifeq ($(OS), osx)
	cd dest; cat $(INDEX) > all.md
endif
ifeq ($(OS), linux)
	cd dest; cat $(INDEX) > all.md
endif
	cp ../bin/emojifix/* dest/chapters/images
	make -f Makefile index
	../bin/find-graphics-path.py > dest/gpath.tex
	cd dest; pandoc all.md -o $(FILENAME).tex -V date="laszewski@gmail.com" --variable titlepage=true -V author="Gregor von Laszewski, Fugang Wang, Geoffrey C. Fox" -V title="Cloud Computing" -V fontsize=10pt --csl=template/ieee-with-url.csl --bibliography references.bib --filter pandoc-crossref --number-sections --standalone  --highlight-style tango --template template/eisvogel/eisvogel.latex
	-cd dest; pdflatex --interaction nonstopmode  $(FILENAME).tex 
	rm -f $(FILENAME).pdf 
	cp dest/$(FILENAME).pdf .



aaa:
	cd dest; pandoc $(RESOURCE) -V pagestyle:headings -V secnumdepth:5 -V geometry:margin=1in --pdf-engine=xelatex -f markdown+smart --toc --epub-embed-font='fonts/*.ttf' -V geometry:margin=1in --bibliography references.bib --csl=../../template/ieee.csl -o $(FILENAME).pdf metadata.txt $(INDEX)


ooo:
	cd dest; pandoc $(RESOURCE) -V pagestyle:headings -V secnumdepth:5 -V geometry:margin=1in --pdf-engine=xelatex -f markdown+smart --toc --epub-embed-font='fonts/*.ttf' -V geometry:margin=1in --bibliography references.bib --csl=../../template/ieee.csl -o $(FILENAME).pdf metadata.txt $(INDEX)


tex:
	cd dest; pandoc -f markdown+smart -f markdown+emoji --toc --epub-embed-font='fonts/*.ttf' --bibliography references.bib --csl=../../template/ieee.csl -o $(FILENAME).tex metadata.txt $(INDEX)
	cd dest; pdflatex content.tex


#


bootstrap:
	cd dest; pandoc   $(RESOURCE) --template ../../template/bootstrap/template.html --css ../../template/bootstrap/template.css --self-contained --toc --toc-depth 2 $(MARKDOWN-OPTIONS)  $(FORMAT) $(FONTS) $(BIB)  $(CSL) $(CSS) -o $(FILENAME).html metadata.txt $(INDEX)

clean:
	rm -rf $(FILENAME).*
	rm -rf dest

list:
	@echo "----"
	@find . -name "*.md"
	@echo "----"
	@echo "Markdown Files": `find . -name "*.md" | wc -l`
	@echo "----"
	@find . -name "*.md"	| sed -e 's/^/ /' | sed 's/$$/\\/'

view:
	$(OPEN_EPUB) dest/$(FILENAME).epub

todo:
	../bin/todo.py > dest/todo.md
	cat dest/todo.md

issues:
	cat ../chapters/issues/issues-in.md > /tmp/issues.md

	python ../bin/issues.py --header="## Internal Issues" --label=internal --cache --nolinks --small >> /tmp/issues.md
	python ../bin/issues.py --header="## Open Sections" --label=section --label=open --cache --nolinks --small >> /tmp/issues.md
	python ../bin/issues.py --header="## Open Chapters" --label=chapter --label=open --cache --nolinks --small >> /tmp/issues.md
	python ../bin/issues.py --header="## Assigned Sections" --label=section --label=assigned --cache --nolinks --small >> /tmp/issues.md
	python ../bin/issues.py --header="## Assigned Chapters" --label=chapter --label=assigned --cache --nolinks --small >> /tmp/issues.md
	python ../bin/issues.py --header="## Open Projects" --label=project --label=open --cache --nolinks --small >> /tmp/issues.md
	python ../bin/issues.py --header="## Assigned Projects" --label=project --label=assigned --cache --nolinks --small >> /tmp/issues.md

	python ../bin/issues.py --cache --linksonly >> /tmp/issues.md
	echo >> /tmp/issues.md
	cp /tmp/issues.md ../chapters/issues/issues.md


get-issues:
	python ../bin/issues.py > ../chapters/preface/issues.md


publish: epub
	cp dest/$(FILENAME).epub ..
	git add ../$(FILENAME).epub
	git commit -m "update epub" ../$(FILENAME).epub
	git push

index:
	echo 

old-index:
	#cd dest; pandoc -o chapters/index.json $(INDEX)
	#cd dest; pandoc-index chapters/index
	#echo "\n" >> dest/chapters/index.md
